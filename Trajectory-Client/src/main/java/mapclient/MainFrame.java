/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mapclient;

import com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author brkyzdmr
 */
public class MainFrame extends javax.swing.JFrame {

    private ArrayList<Point> points; // it stores raw trajectory data
    private boolean isFileLoaded = false;
    private int zoomAmount = 17;
    private static String mapUrl;
    private ServiceFrame sf = ServiceFrame.getInstance(); // for communication with the ServiceFrame
    private SearchFrame rf = SearchFrame.getInstance(); // for communication with the SearchFrame
    private static String redMapUrl; // it store the url for the reduction data
    private static String fieldMapUrl;
    private static String rFieldMapUrl;
    private static MainFrame instance = new MainFrame();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        //LookNFeel();    
        initComponents();
    }

    public static MainFrame getInstance() {
        return instance;
    }

    public static String getMapUrl() {
        return mapUrl;
    }

    public static void setMapUrl(String mapUrl) {
        MainFrame.mapUrl = mapUrl;
    }

    public static String getRedMapUrl() {
        return redMapUrl;
    }

    public static void setRedMapUrl(String redMapUrl) {
        MainFrame.redMapUrl = redMapUrl;
    }

    public int getZoomAmount() {
        return zoomAmount;
    }
    
    public ArrayList<Point> getPoints() {
        return points;
    }

    public static String getFieldMapUrl() {
        return fieldMapUrl;
    }

    public static void setFieldMapUrl(String fieldMapUrl) {
        MainFrame.fieldMapUrl = fieldMapUrl;
    }

    public static String getrFieldMapUrl() {
        return rFieldMapUrl;
    }

    public static void setrFieldMapUrl(String rFieldMapUrl) {
        MainFrame.rFieldMapUrl = rFieldMapUrl;
    }
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddTrajectoryData = new javax.swing.JButton();
        btnSearchInField = new javax.swing.JButton();
        btnReduction = new javax.swing.JButton();
        lbl_MapImage = new javax.swing.JLabel();
        btnZoomOut = new javax.swing.JButton();
        btnZoomIn = new javax.swing.JButton();
        txtCenterPoint = new javax.swing.JTextField();
        txtEpsilon = new javax.swing.JTextField();
        btnSearchInReductedField = new javax.swing.JButton();
        txtCenterPoint2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trajectory Data Processing - Main Screen");
        setLocation(new java.awt.Point(250, 250));
        setName("mainFrame"); // NOI18N
        setResizable(false);

        btnAddTrajectoryData.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnAddTrajectoryData.setText("Add Trajectory Data");
        btnAddTrajectoryData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTrajectoryDataActionPerformed(evt);
            }
        });

        btnSearchInField.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnSearchInField.setText("Search in Field");
        btnSearchInField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchInFieldActionPerformed(evt);
            }
        });

        btnReduction.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnReduction.setText("Reduction");
        btnReduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReductionActionPerformed(evt);
            }
        });

        btnZoomOut.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        btnZoomOut.setText("-");
        btnZoomOut.setPreferredSize(new java.awt.Dimension(70, 50));
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });

        btnZoomIn.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        btnZoomIn.setText("+");
        btnZoomIn.setPreferredSize(new java.awt.Dimension(70, 50));
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });

        txtCenterPoint.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCenterPoint.setToolTipText("Square searching in the raw trajectory data(CenterPointLat, CenterPointLong, EdgeLengthX, EdgeLengthY)");
        txtCenterPoint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCenterPointMouseClicked(evt);
            }
        });

        txtEpsilon.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEpsilon.setToolTipText("Epsilon value for reduction (double)");
        txtEpsilon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtEpsilonMouseClicked(evt);
            }
        });

        btnSearchInReductedField.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnSearchInReductedField.setText("Search in Reducted Field");
        btnSearchInReductedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchInReductedFieldActionPerformed(evt);
            }
        });

        txtCenterPoint2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCenterPoint2.setToolTipText("Square searching in the reducted trajectory data(Epsilon, CenterPointLat, CenterPointLong, EdgeLengthX, EdgeLengthY)");
        txtCenterPoint2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCenterPoint2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReduction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddTrajectoryData, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(btnSearchInField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCenterPoint)
                    .addComponent(txtEpsilon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(btnSearchInReductedField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCenterPoint2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_MapImage, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_MapImage, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddTrajectoryData, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(txtEpsilon, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReduction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCenterPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchInField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCenterPoint2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchInReductedField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbl_MapImage.getAccessibleContext().setAccessibleName("lbl_MapImage");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * It creates a File Dialog Window for getting the trajectory data from a file
     * 
     * @param evt 
     */
    private void btnAddTrajectoryDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTrajectoryDataActionPerformed
        if (!isFileLoaded) {
            openFileDialog();
        } else {
            int reply = JOptionPane.showConfirmDialog(null,
                    "Do you want to add new trajectory data?",
                    "Warning", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                openFileDialog();
            }
        }

    }//GEN-LAST:event_btnAddTrajectoryDataActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        if (isFileLoaded) {
            zoomIn();
        } else {
            // Button not working here.
        }
    }//GEN-LAST:event_btnZoomInActionPerformed

    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        if (isFileLoaded) {
            zoomOut();
        } else {
            // Button not working here.
        }
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void btnReductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReductionActionPerformed
        String value = txtEpsilon.getText();

        if ("".equals(value)) {
            JOptionPane.showMessageDialog(null, "Please set the epsilon value!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                mapserver.IncomingData incomingData;
                OutgoingData outgoingData = new OutgoingData("reduction", points, value);
                incomingData = Client.sendMapData(outgoingData);
                System.out.println("Reduction succeed!");

                if (incomingData != null) {
                    redMapUrl = Map.createUrl(incomingData.getProcessedData(), "blue", "0x0000FFFF");
                    redMapUrl = Map.changeZoomAmount(redMapUrl, zoomAmount);
                    sf.reloadMap(redMapUrl, "redmapcanvas");
                    sf.getTxtRedRate().setText(incomingData.getReductionRate() + "");
                    sf.getTxtThTime().setText(incomingData.getThreadTime());
                    sf.getTxtNumOfPoint().setText(incomingData.getProcessedData().size() + "");
                    sf.setVisible(true);

                } else {
                    JOptionPane.showMessageDialog(null, "Reduction failed!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException ex) {
                System.out.println("Wrong textbox data: " + ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnReductionActionPerformed

    private void btnSearchInFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchInFieldActionPerformed

        String value = txtCenterPoint.getText();

        if ("".equals(value)) {
            JOptionPane.showMessageDialog(null, "Please set the center point!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                mapserver.IncomingData incomingData;
                OutgoingData outgoingData = new OutgoingData("searchinfield", points, value);
                incomingData = Client.sendMapData(outgoingData);               

                if(incomingData != null) {
                    System.out.println("Reduction succeed!");
                    fieldMapUrl = Map.createUrlWithSearchField(incomingData.getProcessedData(), "blue", value);
                    fieldMapUrl = Map.changeZoomAmount(fieldMapUrl, zoomAmount);
                    rf.reloadMap(fieldMapUrl, "fieldmapcanvas");
                    rf.getTxtThTime().setText(incomingData.getThreadTime());
                    rf.getTxtNumOfPoint().setText(incomingData.getProcessedData().size() + "");
                    rf.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Search in raw data failed!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException ex) {
                System.out.println("Wrong texbox data: " + ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnSearchInFieldActionPerformed

    private void txtEpsilonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEpsilonMouseClicked
        txtEpsilon.setText("");
    }//GEN-LAST:event_txtEpsilonMouseClicked

    private void txtCenterPointMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCenterPointMouseClicked
        txtCenterPoint.setText("");
    }//GEN-LAST:event_txtCenterPointMouseClicked

    private void btnSearchInReductedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchInReductedFieldActionPerformed

                String value = txtCenterPoint2.getText();
                String[] values = value.split(",");
                String fValue = values[1]+ "," + values[2] + "," + values[3] + "," + values[4];

        if ("".equals(value)) {
            JOptionPane.showMessageDialog(null, "Please set the center point", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                mapserver.IncomingData incomingData;
                OutgoingData outgoingData = new OutgoingData("searchinreductedfield", points, value);
                incomingData = Client.sendMapData(outgoingData);

                if(incomingData != null) {
                    rFieldMapUrl = Map.createUrlWithSearchField(incomingData.getProcessedData(), "blue", fValue);
                    rFieldMapUrl = Map.changeZoomAmount(rFieldMapUrl, zoomAmount);
                    rf.reloadMap(rFieldMapUrl, "rfieldmapcanvas");
                    rf.getTxtThTime().setText(incomingData.getThreadTime());
                    rf.getTxtNumOfPoint().setText(incomingData.getProcessedData().size() + "");
                    rf.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Search in reducted data failed!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException ex) {
                System.out.println("Wrong texbox data: " + ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        
    }//GEN-LAST:event_btnSearchInReductedFieldActionPerformed

    private void txtCenterPoint2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCenterPoint2MouseClicked
        txtCenterPoint2.setText("");
    }//GEN-LAST:event_txtCenterPoint2MouseClicked

    private void zoomIn() {
        mapUrl = Map.changeZoomAmount(mapUrl, ++zoomAmount);
        reloadMap(mapUrl, "maincanvas");
    }

    private void zoomOut() {
        mapUrl = Map.changeZoomAmount(mapUrl, --zoomAmount);
        reloadMap(mapUrl, "maincanvas");
    }

    private void openFileDialog() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt", "text"));
        int result = fileChooser.showOpenDialog(this);
        String filePath;

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            filePath = selectedFile.getAbsolutePath();
            try {
                readFromFile(filePath);
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        sf.setVisible(false);
    }

    /**
     * It separates the data line by line according to comma then 
     * assign to the string array. First data in the array is latitude, 
     * and the second data is longitude. Then draws the map by these values.
     * 
     * @param filePath 
     * @throws IOException 
     */
    private void readFromFile(String filePath) throws IOException {

        BufferedReader br = new BufferedReader(new FileReader(filePath));
        points = new ArrayList<>();
        try {
            String line = null;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                Point newPoint = new Point(Double.parseDouble(values[0]),
                        Double.parseDouble(values[1]));
                points.add(newPoint);
            }
        } catch (IOException | NumberFormatException ex) {
            System.out.println("File string read exception: " + ex);
        } finally {
            br.close();
        }
        try {
            mapUrl = Map.createUrl(points, "red", "0xFF0000FF");
            reloadMap(mapUrl, "maincanvas");
            isFileLoaded = true;
        } catch (NullPointerException ex) {
            System.out.println("Map loading error: " + ex);
        }

    }

    /**
     * 
     * With mapUrl, it sends the request to the Google servers 
     * and prints the returned image on the screen.
     * 
     * @param mapUrl url that will send to Google servers
     * @param imageName image name that will in the project folder
     */
    private void reloadMap(String mapUrl, String imageName) {
        try {
            Map.getImageFromUrl(mapUrl, imageName);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // image scaling process
        ImageIcon icon = new ImageIcon(imageName + ".jpg");
        Image img = icon.getImage().getScaledInstance(lbl_MapImage.getWidth(),
                lbl_MapImage.getHeight(), Image.SCALE_SMOOTH);
        lbl_MapImage.setIcon(new ImageIcon(img));
    }
    
    private void LookNFeel() {
        try {
            // for classical windows theme
            UIManager.setLookAndFeel(new WindowsClassicLookAndFeel());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    public static void main(String args[]) {                   

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearchInField;
    private javax.swing.JButton btnSearchInReductedField;
    private javax.swing.JButton btnReduction;
    private javax.swing.JButton btnAddTrajectoryData;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JLabel lbl_MapImage;
    private javax.swing.JTextField txtEpsilon;
    private javax.swing.JTextField txtCenterPoint;
    private javax.swing.JTextField txtCenterPoint2;
    // End of variables declaration//GEN-END:variables
}
